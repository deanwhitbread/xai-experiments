'''
    The LimeXaiTool concrete class represents
    as explainable AI (XAI) tool used to 
    interpret predictions using LIME. 
'''
__author__ = 'Dean Whitbread'
__version__ = '05-07-2023'

from xai.tools.xai_tool import XaiTool
from lime.lime_image import LimeImageExplainer
import matplotlib.pyplot as plt
import numpy as np
from skimage.segmentation import mark_boundaries

class LimeXaiTool(XaiTool):

    def __init__(self, target_im, model):
        '''Constructor for LimeXaiTool class.

        Parameters:
        target_im: The target image being classified.
        model: The classifcation model used to classify the target image.
        '''
        self.lime = LimeImageExplainer(random_state=3)
        self.target_image = target_im
        
        expl_object = self.get_explaination(model)
        self.set_explained_image(image=None, expl_object=expl_object)
    
    def get_explaination(self, model) -> object:
        '''Return the explaination object of the xai tool.

        Parameters:
        target_im: The target image being classified.
        model: The classifcation model used to classify the target image.
        '''
        return self.lime.explain_instance(self.get_target_image(), model)

    def show(self):
        '''Display the XAI tool's explaination.'''
        fig, ax = plt.subplots(1,2)
        ax[0].imshow(self.get_target_image())
        ax[1].imshow(self.get_explained_image())

        plt.show()

    def set_explained_image(self, image, expl_object=None):
        '''Set the image explained by the XAI tool.

        Parameters:
        image: The image explained by the XAI tool.
        expl_object: The explaination object generated by the XAI tool.
                     Default is None.
        '''
        label =  expl_object.top_labels[0]
        image, mask = expl_object.get_image_and_mask(
                    label, positive_only=False
                )

        self.explained_image = mark_boundaries(image, mask)

    def get_target_image(self):
        '''Return the target image being explained by the XAI tool.'''
        return self.target_image

    def get_explained_image(self):
        '''Return the image explained by the XAI tool.'''
        return self.explained_image

