'''
    The ShapXaiTool concrete class represents
    as explainable AI (XAI) tool used to
    interpret predictions using SHAP.
'''
__author__ = 'Dean Whitbread'
__version__ = '20-07-2023'

# ignore warning messages when import shap
from warnings import filterwarnings
filterwarnings("ignore", message=".*The 'nopython' keyword.*")

from xai.tools.xai_tool import XaiTool
import shap
import matplotlib.pyplot as plt
from analyser.image_analyser import ImageAnalyser

class ShapXaiTool(XaiTool):
    def __init__(self, target_im, model, images):
        '''Construct the ShapXaiTool object.
            
        Parameters:
        target_im: The target image being classified.
        model: The classifcation model used to classify the target image.
        images: A numpy matrix of all the images in the dataset. 
        '''
        self.target_image = target_im
        self.images = images
        
        self.expl_object = self.get_explaination(model)
        self.set_explained_image(image=None, expl_object=self.expl_object)

    def get_explaination(self, model) -> object:
        '''Return the explaination object of the xai tool. 

        Parameters:
        target_im: The target image being classified. 
        model: The classifcation model used to classify the target image. 
        '''
        x, y, depth = self.target_image.shape
        masker = shap.maskers.Image(f'blur({x},{y})', self.target_image.shape)
        return shap.Explainer(model, masker)

    def show(self):
        '''Display the XAI tool's explaination.'''
        analyser = ImageAnalyser(self)
        print(analyser.results())

        plt.show() 

    def set_explained_image(self, image, expl_object=None):
        '''Set the image explained by the XAI tool.
        
        Parameters:
        image: The image explained by the XAI tool.
        expl_object: The explaination object generated by the XAI tool.
                     Default is None.
        '''
        shap_values = expl_object(
                    self.images[-1],
                    max_evals=5000,
                    batch_size=50, 
                    outputs=shap.Explanation.argsort.flip[:2]
                )
        shap_values.output_names.append("Brain MRI")
        shap.plots.image(shap_values, show=False)
        
        # extract the explained image from the plot
        fig = plt.gcf()
        axes = plt.gca()
        renderer = fig.canvas.get_renderer()

        images = axes.get_images()[1]       # get explained image axes
        self.explained_image = images.make_image(
                    renderer, 
                    unsampled=True      # retain image dimensions
                )[0]

    def get_target_image(self):
        '''Return the target image being explained by the XAI tool.'''
        return self.target_image

    def get_explained_image(self):
        '''Return the image explained by the XAI tool.'''
        return self.explained_image
